package com.revature.servlet;

import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ers.beans.ErsReimbursement;
import ers.beans.ErsRole;
import ers.beans.ErsStatus;
import ers.beans.ErsType;
import ers.beans.ErsUser;
import ers.dao.ErsDAO;

public class MasterServlet extends HttpServlet{
	private ErsDAO dao;
	private ServletHelper helper;
	private final int MANAGER=2;
	private final int USER=2;
	@Override
	public void init() throws ServletException {
		// TODO Auto-generated method stub
		super.init();
		dao = new ErsDAO();
		helper = new ServletHelper();
		this.getServletContext().setAttribute("list", new ArrayList<ErsReimbursement>());
		this.getServletContext().setAttribute("mlist", new ArrayList<ErsReimbursement>());
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		this.doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//		ErsDAO dao = new ErsDAO();
		ErsUser info;
		switch(req.getRequestURI()){
		case "/ERS_Web/login.do": 
			if((info = dao.retrieveUser(req.getParameter("user")))!=null){
				if(info.getPassword().equals(req.getParameter("pass")))
					System.out.println(info.getRole().getRole());
					if(info.getRole().getRole()!=2){
						System.out.println("password match");
						req.getSession().setAttribute("userid", info.getId());
						req.getSession().setAttribute("username", info.getFname());
						req.getSession().setAttribute("userRole", info.getRole().getRole());
						resp.sendRedirect("page.jsp");
					}
					else if(info.getRole().getRole()==2){
						System.out.println("password match");
						req.getSession().setAttribute("userid", info.getId());
						req.getSession().setAttribute("username", info.getFname());
						req.getSession().setAttribute("userRole", info.getRole().getRole());
						resp.sendRedirect("page.jsp");
					}
				else{
					System.out.println("password failed");
					req.getSession().setAttribute("loginFail", "Login failed, I guess you don't know who you are...");
					resp.sendRedirect("login.jsp");
				}
			}else{
			System.out.println("password failed");
			req.setAttribute("loginFail", "Login failed, I guess you don't know who you are...");
			resp.sendRedirect("login.jsp");
			}
			break;
		case "/ERS_Web/ureg.do": 
			//Needs work
			info = new ErsUser();
			info.setId(1);
			info.setUsername(req.getParameter("user"));
			info.setPassword(req.getParameter("pass"));
			info.setFname(req.getParameter("fname"));
			info.setLname(req.getParameter("lname"));
			info.setEmail(req.getParameter("email"));
			info.setRole(new ErsRole(1,""));
			System.out.println("creating user...");
			System.out.println(info);
			if(dao.createUser(info)){
				req.getSession().setAttribute("userid", info.getId());
				req.getSession().setAttribute("username", info.getFname());
				req.getSession().setAttribute("userRole", info.getRole().getRole());
				resp.sendRedirect("page.jsp");
			}else{
				System.out.println("registration failed");
				req.setAttribute("regFail", "Registration failed, Try again or don't...");
				resp.sendRedirect("ureg.jsp");
			}
			break;
		case "/ERS_Web/mstate1.do": 
			req.getSession().setAttribute("mstate", 1);
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/mstate2.do": 
			req.getSession().setAttribute("mstate", 2);
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/mstate3.do": 
			req.getSession().setAttribute("mstate", 3);
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/mstate4.do": 
			req.getSession().setAttribute("mstate", 4);
			List<ErsReimbursement> mlist = (ArrayList<ErsReimbursement>) req.getServletContext().getAttribute("list");
			//(int)req.getSession().getAttribute("userid")
			for(ErsReimbursement e:dao.getAllReims()){
				mlist.add(e);
			}
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/ustate1.do": 
			req.getSession().setAttribute("ustate", 1);
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/ustate2.do": 
			req.getSession().setAttribute("ustate", 2);
			List<ErsReimbursement> mlist = (ArrayList<ErsReimbursement>) req.getServletContext().getAttribute("list");
			//(int)req.getSession().getAttribute("userid")
			for(ErsReimbursement e:dao.getAllReims((int)req.getSession().getAttribute("userid"))){
				list.add(e);
			}
			resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/nstat.do": 
			if(dao.createStat(new ErsStatus(1,req.getParameter("newstat"))))
				resp.sendRedirect("page.jsp"); 
			else
				resp.sendRedirect("state.jsp");
			break;
		case "/ERS_Web/ntype.do": 
			if(dao.createType(new ErsType(1,req.getParameter("newtype"))))
				resp.sendRedirect("page.jsp"); 
			else
				resp.sendRedirect("state.jsp"); 
			break;
		case "/ERS_Web/nrole.do": 
			if(dao.createRole(new ErsRole(1,req.getParameter("newrole"))))
				resp.sendRedirect("page.jsp"); 
			else
				resp.sendRedirect("state.jsp");
			break;
		case "/ERS_Web/process.do":
			
			resp.sendRedirect("page.jsp");
			break;
		case "/ERS_Web/nreim.do": 
			System.out.println("Entered");
			if(dao.createReim(new ErsReimbursement(1, Integer.parseInt(req.getParameter("amount")), new Date(1), new ErsUser((int)req.getSession().getAttribute("userid"), " ", " ", " ", " ", " ", new ErsRole(1, " ")), new ErsStatus(1, "Pending"), new ErsType(1,"Lodging"))))
				resp.sendRedirect("page.jsp");
			else{
				System.out.println("ERROR");
				resp.sendRedirect("page.jsp");
			}
			break;
		case "/ERS_Web/creim.do":
			
			resp.sendRedirect("page.jsp");
			break;
		case "/ERS_Web/logout.do":
			req.getSession().setAttribute("userRole", 0);
			req.getSession().invalidate();
			resp.sendRedirect("reimburse.jsp");
			break;
//		case "/ERS_Web/login.do": helper.login(req, resp); break;
//		case "/ERS_Web/ureg.do": helper.ureg(req, resp); break;
//		case "/ERS_Web/mstate1.do": helper.stateChange(req, resp, MANAGER, 1); break;
//		case "/ERS_Web/mstate2.do": helper.stateChange(req, resp, MANAGER, 2); break;
//		case "/ERS_Web/mstate3.do": helper.stateChange(req, resp, MANAGER, 3); break;
//		case "/ERS_Web/mstate4.do": helper.stateChange(req, resp, MANAGER, 4); break;
//		case "/ERS_Web/ustate1.do": helper.stateChange(req, resp, USER, 1); break;
//		case "/ERS_Web/ustate2.do": helper.stateChange(req, resp, USER, 1); break;
//		case "/ERS_Web/nstat.do": helper.nstat(req, resp); break;
//		case "/ERS_Web/ntype.do": helper.ntype(req, resp); break;
//		case "/ERS_Web/nrole.do": helper.nrole(req, resp); break;
//		case "/ERS_Web/process.do": helper.process(req, resp); break;
//		case "/ERS_Web/nreim.do": helper.nreim(req, resp); break;
//		case "/ERS_Web/creim.do": helper.creim(req, resp); break;
//		case "/ERS_Web/logout.do": helper.logout(req, resp); break;
		default: throw new IllegalArgumentException("Invalid URI");
		}
	}
}
